
i2c_bus.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  000003f8  0000048c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000046  00800142  00800142  000004ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000500  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000540  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000daf  00000000  00000000  00000600  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000915  00000000  00000000  000013af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006a7  00000000  00000000  00001cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e4  00000000  00000000  0000236c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000541  00000000  00000000  00002550  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000550  00000000  00000000  00002a91  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002fe1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 30 01 	jmp	0x260	; 0x260 <__vector_18>
  4c:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ef       	ldi	r30, 0xF8	; 248
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 34       	cpi	r26, 0x42	; 66
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e4       	ldi	r26, 0x42	; 66
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 38       	cpi	r26, 0x88	; 136
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Initialize I2C (TWI)
    twi_init();
  a6:	0e 94 00 01 	call	0x200	; 0x200 <twi_init>

    // Initialize UART to asynchronous, 8N1, 9600
    uart_init(UART_BAUD_SELECT(9600, F_CPU));
  aa:	87 e6       	ldi	r24, 0x67	; 103
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 88 01 	call	0x310	; 0x310 <uart_init>

    // Configure 16-bit Timer/Counter1 to update FSM
    // Set prescaler to 33 ms and enable interrupt
    TIM1_overflow_33ms();
  b2:	e1 e8       	ldi	r30, 0x81	; 129
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	8a 7f       	andi	r24, 0xFA	; 250
  ba:	80 83       	st	Z, r24
  bc:	80 81       	ld	r24, Z
  be:	82 60       	ori	r24, 0x02	; 2
  c0:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
  c2:	ef e6       	ldi	r30, 0x6F	; 111
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	81 60       	ori	r24, 0x01	; 1
  ca:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
  cc:	78 94       	sei

    // Put strings to ringbuffer for transmitting via UART
    uart_puts("\r\nScan I2C-bus for devices:\r\n");
  ce:	82 e0       	ldi	r24, 0x02	; 2
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	0e 94 b8 01 	call	0x370	; 0x370 <uart_puts>
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <main+0x30>

000000d8 <__vector_13>:
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Update Finite State Machine and test I2C slave addresses 
 *           between 8 and 119.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
  e2:	1f 93       	push	r17
  e4:	2f 93       	push	r18
  e6:	3f 93       	push	r19
  e8:	4f 93       	push	r20
  ea:	5f 93       	push	r21
  ec:	6f 93       	push	r22
  ee:	7f 93       	push	r23
  f0:	8f 93       	push	r24
  f2:	9f 93       	push	r25
  f4:	af 93       	push	r26
  f6:	bf 93       	push	r27
  f8:	ef 93       	push	r30
  fa:	ff 93       	push	r31
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	00 d0       	rcall	.+0      	; 0x102 <__vector_13+0x2a>
 102:	cd b7       	in	r28, 0x3d	; 61
 104:	de b7       	in	r29, 0x3e	; 62
    static state_t state = STATE_IDLE;  // Current state of the FSM
    static uint8_t addr = 7;            // I2C slave address
    uint8_t result = 1;                 // ACK result from the bus
    char uart_string[2] = "00"; // String for converting numbers by itoa()
 106:	80 e3       	ldi	r24, 0x30	; 48
 108:	90 e3       	ldi	r25, 0x30	; 48
 10a:	9a 83       	std	Y+2, r25	; 0x02
 10c:	89 83       	std	Y+1, r24	; 0x01
	static uint8_t number_of_devices;

    // FSM
    switch (state)
 10e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state.1964>
 112:	82 30       	cpi	r24, 0x02	; 2
 114:	61 f1       	breq	.+88     	; 0x16e <__vector_13+0x96>
 116:	83 30       	cpi	r24, 0x03	; 3
 118:	09 f4       	brne	.+2      	; 0x11c <__vector_13+0x44>
 11a:	3f c0       	rjmp	.+126    	; 0x19a <__vector_13+0xc2>
 11c:	81 30       	cpi	r24, 0x01	; 1
 11e:	09 f0       	breq	.+2      	; 0x122 <__vector_13+0x4a>
 120:	56 c0       	rjmp	.+172    	; 0x1ce <__vector_13+0xf6>
    {
    // Increment I2C slave address
    case STATE_IDLE:
        addr++;
 122:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 126:	91 e0       	ldi	r25, 0x01	; 1
 128:	98 0f       	add	r25, r24
 12a:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__DATA_REGION_ORIGIN__>
        // If slave address is between 8 and 119 then move to SEND state
		if((addr > 7) && (addr <120)){
 12e:	87 50       	subi	r24, 0x07	; 7
 130:	80 37       	cpi	r24, 0x70	; 112
 132:	20 f4       	brcc	.+8      	; 0x13c <__vector_13+0x64>
			state = STATE_SEND;
 134:	82 e0       	ldi	r24, 0x02	; 2
 136:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.1964>
 13a:	4c c0       	rjmp	.+152    	; 0x1d4 <__vector_13+0xfc>
		}
		else{
			if(addr == 120){
 13c:	98 37       	cpi	r25, 0x78	; 120
 13e:	89 f4       	brne	.+34     	; 0x162 <__vector_13+0x8a>
				uart_puts("\n Number of detected devices: ");
 140:	80 e2       	ldi	r24, 0x20	; 32
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	0e 94 b8 01 	call	0x370	; 0x370 <uart_puts>
				itoa(number_of_devices, uart_string, 10);
 148:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 14c:	4a e0       	ldi	r20, 0x0A	; 10
 14e:	be 01       	movw	r22, r28
 150:	6f 5f       	subi	r22, 0xFF	; 255
 152:	7f 4f       	sbci	r23, 0xFF	; 255
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 c5 01 	call	0x38a	; 0x38a <__itoa_ncheck>
				uart_puts(uart_string);
 15a:	ce 01       	movw	r24, r28
 15c:	01 96       	adiw	r24, 0x01	; 1
 15e:	0e 94 b8 01 	call	0x370	; 0x370 <uart_puts>
			}
			addr = 0;
 162:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			state = STATE_IDLE;
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.1964>
 16c:	33 c0       	rjmp	.+102    	; 0x1d4 <__vector_13+0xfc>
        // |      from Master       | from Slave |
        // +------------------------+------------+
        // | 7  6  5  4  3  2  1  0 |     ACK    |
        // |a6 a5 a4 a3 a2 a1 a0 R/W|   result   |
        // +------------------------+------------+
        result = twi_start((addr<<1) + TWI_WRITE);
 16e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 172:	88 0f       	add	r24, r24
 174:	0e 94 0f 01 	call	0x21e	; 0x21e <twi_start>
 178:	18 2f       	mov	r17, r24
        twi_stop();
 17a:	0e 94 2c 01 	call	0x258	; 0x258 <twi_stop>
        /* Test result from I2C bus. If it is 0 then move to ACK state, 
         * otherwise move to IDLE */
		if(result == 0) // ACK
 17e:	11 11       	cpse	r17, r1
 180:	04 c0       	rjmp	.+8      	; 0x18a <__vector_13+0xb2>
			state = STATE_ACK;
 182:	83 e0       	ldi	r24, 0x03	; 3
 184:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.1964>
 188:	25 c0       	rjmp	.+74     	; 0x1d4 <__vector_13+0xfc>
		else{  //NACK
			uart_puts("--");
 18a:	8f e3       	ldi	r24, 0x3F	; 63
 18c:	91 e0       	ldi	r25, 0x01	; 1
 18e:	0e 94 b8 01 	call	0x370	; 0x370 <uart_puts>
			state = STATE_IDLE;
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.1964>
 198:	1d c0       	rjmp	.+58     	; 0x1d4 <__vector_13+0xfc>
        break;

    // A module connected to the bus was found
    case STATE_ACK:
        // Send info about active I2C slave to UART and move to IDLE
		itoa(addr, uart_string, 16);	//Convert SLA to hexa
 19a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 19e:	40 e1       	ldi	r20, 0x10	; 16
 1a0:	be 01       	movw	r22, r28
 1a2:	6f 5f       	subi	r22, 0xFF	; 255
 1a4:	7f 4f       	sbci	r23, 0xFF	; 255
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	0e 94 c5 01 	call	0x38a	; 0x38a <__itoa_ncheck>
		uart_puts(uart_string);			//Send it to UART 
 1ac:	ce 01       	movw	r24, r28
 1ae:	01 96       	adiw	r24, 0x01	; 1
 1b0:	0e 94 b8 01 	call	0x370	; 0x370 <uart_puts>
		uart_puts(" ");
 1b4:	8d e3       	ldi	r24, 0x3D	; 61
 1b6:	91 e0       	ldi	r25, 0x01	; 1
 1b8:	0e 94 b8 01 	call	0x370	; 0x370 <uart_puts>
		number_of_devices++;
 1bc:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
 1c0:	8f 5f       	subi	r24, 0xFF	; 255
 1c2:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__data_end>
		state = STATE_IDLE;
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.1964>
        break;
 1cc:	03 c0       	rjmp	.+6      	; 0x1d4 <__vector_13+0xfc>

    // If something unexpected happens then move to IDLE
    default:
        state = STATE_IDLE;
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state.1964>
        break;
    }
}
 1d4:	0f 90       	pop	r0
 1d6:	0f 90       	pop	r0
 1d8:	df 91       	pop	r29
 1da:	cf 91       	pop	r28
 1dc:	ff 91       	pop	r31
 1de:	ef 91       	pop	r30
 1e0:	bf 91       	pop	r27
 1e2:	af 91       	pop	r26
 1e4:	9f 91       	pop	r25
 1e6:	8f 91       	pop	r24
 1e8:	7f 91       	pop	r23
 1ea:	6f 91       	pop	r22
 1ec:	5f 91       	pop	r21
 1ee:	4f 91       	pop	r20
 1f0:	3f 91       	pop	r19
 1f2:	2f 91       	pop	r18
 1f4:	1f 91       	pop	r17
 1f6:	0f 90       	pop	r0
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	0f 90       	pop	r0
 1fc:	1f 90       	pop	r1
 1fe:	18 95       	reti

00000200 <twi_init>:
{
    TWCR = _BV(TWINT) | _BV(TWEN);

    while ((TWCR & _BV(TWINT)) == 0);
    return (TWDR);
}
 200:	87 b1       	in	r24, 0x07	; 7
 202:	8f 7c       	andi	r24, 0xCF	; 207
 204:	87 b9       	out	0x07, r24	; 7
 206:	88 b1       	in	r24, 0x08	; 8
 208:	80 63       	ori	r24, 0x30	; 48
 20a:	88 b9       	out	0x08, r24	; 8
 20c:	e9 eb       	ldi	r30, 0xB9	; 185
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	80 81       	ld	r24, Z
 212:	8c 7f       	andi	r24, 0xFC	; 252
 214:	80 83       	st	Z, r24
 216:	88 e9       	ldi	r24, 0x98	; 152
 218:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 21c:	08 95       	ret

0000021e <twi_start>:
 21e:	94 ea       	ldi	r25, 0xA4	; 164
 220:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 224:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 228:	99 23       	and	r25, r25
 22a:	e4 f7       	brge	.-8      	; 0x224 <twi_start+0x6>
 22c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 230:	84 e8       	ldi	r24, 0x84	; 132
 232:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 236:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 23a:	88 23       	and	r24, r24
 23c:	e4 f7       	brge	.-8      	; 0x236 <twi_start+0x18>
 23e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 242:	88 7f       	andi	r24, 0xF8	; 248
 244:	88 31       	cpi	r24, 0x18	; 24
 246:	21 f0       	breq	.+8      	; 0x250 <twi_start+0x32>
 248:	80 34       	cpi	r24, 0x40	; 64
 24a:	21 f4       	brne	.+8      	; 0x254 <twi_start+0x36>
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	08 95       	ret
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	08 95       	ret
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	08 95       	ret

00000258 <twi_stop>:
 * Purpose:  Generates stop condition on TWI bus.
 * Returns:  none
 **********************************************************************/
void twi_stop(void)
{
    TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
 258:	84 e9       	ldi	r24, 0x94	; 148
 25a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 25e:	08 95       	ret

00000260 <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 260:	1f 92       	push	r1
 262:	0f 92       	push	r0
 264:	0f b6       	in	r0, 0x3f	; 63
 266:	0f 92       	push	r0
 268:	11 24       	eor	r1, r1
 26a:	2f 93       	push	r18
 26c:	8f 93       	push	r24
 26e:	9f 93       	push	r25
 270:	ef 93       	push	r30
 272:	ff 93       	push	r31
 274:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 278:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 27c:	8c 71       	andi	r24, 0x1C	; 28
 27e:	e0 91 45 01 	lds	r30, 0x0145	; 0x800145 <UART_RxHead>
 282:	ef 5f       	subi	r30, 0xFF	; 255
 284:	ef 71       	andi	r30, 0x1F	; 31
 286:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <UART_RxTail>
 28a:	e9 17       	cp	r30, r25
 28c:	39 f0       	breq	.+14     	; 0x29c <__vector_18+0x3c>
 28e:	e0 93 45 01 	sts	0x0145, r30	; 0x800145 <UART_RxHead>
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	e8 5b       	subi	r30, 0xB8	; 184
 296:	fe 4f       	sbci	r31, 0xFE	; 254
 298:	20 83       	st	Z, r18
 29a:	01 c0       	rjmp	.+2      	; 0x29e <__vector_18+0x3e>
 29c:	82 e0       	ldi	r24, 0x02	; 2
 29e:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <UART_LastRxError>
 2a2:	89 2b       	or	r24, r25
 2a4:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <UART_LastRxError>
 2a8:	ff 91       	pop	r31
 2aa:	ef 91       	pop	r30
 2ac:	9f 91       	pop	r25
 2ae:	8f 91       	pop	r24
 2b0:	2f 91       	pop	r18
 2b2:	0f 90       	pop	r0
 2b4:	0f be       	out	0x3f, r0	; 63
 2b6:	0f 90       	pop	r0
 2b8:	1f 90       	pop	r1
 2ba:	18 95       	reti

000002bc <__vector_19>:
 2bc:	1f 92       	push	r1
 2be:	0f 92       	push	r0
 2c0:	0f b6       	in	r0, 0x3f	; 63
 2c2:	0f 92       	push	r0
 2c4:	11 24       	eor	r1, r1
 2c6:	8f 93       	push	r24
 2c8:	9f 93       	push	r25
 2ca:	ef 93       	push	r30
 2cc:	ff 93       	push	r31
 2ce:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <UART_TxHead>
 2d2:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <UART_TxTail>
 2d6:	98 17       	cp	r25, r24
 2d8:	69 f0       	breq	.+26     	; 0x2f4 <__vector_19+0x38>
 2da:	e0 91 46 01 	lds	r30, 0x0146	; 0x800146 <UART_TxTail>
 2de:	ef 5f       	subi	r30, 0xFF	; 255
 2e0:	ef 71       	andi	r30, 0x1F	; 31
 2e2:	e0 93 46 01 	sts	0x0146, r30	; 0x800146 <UART_TxTail>
 2e6:	f0 e0       	ldi	r31, 0x00	; 0
 2e8:	e8 59       	subi	r30, 0x98	; 152
 2ea:	fe 4f       	sbci	r31, 0xFE	; 254
 2ec:	80 81       	ld	r24, Z
 2ee:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 2f2:	05 c0       	rjmp	.+10     	; 0x2fe <__vector_19+0x42>
 2f4:	e1 ec       	ldi	r30, 0xC1	; 193
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	80 81       	ld	r24, Z
 2fa:	8f 7d       	andi	r24, 0xDF	; 223
 2fc:	80 83       	st	Z, r24
 2fe:	ff 91       	pop	r31
 300:	ef 91       	pop	r30
 302:	9f 91       	pop	r25
 304:	8f 91       	pop	r24
 306:	0f 90       	pop	r0
 308:	0f be       	out	0x3f, r0	; 63
 30a:	0f 90       	pop	r0
 30c:	1f 90       	pop	r1
 30e:	18 95       	reti

00000310 <uart_init>:
 310:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <UART_TxHead>
 314:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <UART_TxTail>
 318:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <UART_RxHead>
 31c:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <UART_RxTail>
 320:	28 2f       	mov	r18, r24
 322:	39 2f       	mov	r19, r25
 324:	33 23       	and	r19, r19
 326:	1c f4       	brge	.+6      	; 0x32e <uart_init+0x1e>
 328:	22 e0       	ldi	r18, 0x02	; 2
 32a:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 32e:	90 78       	andi	r25, 0x80	; 128
 330:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 334:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 338:	88 e9       	ldi	r24, 0x98	; 152
 33a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 33e:	86 e0       	ldi	r24, 0x06	; 6
 340:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 344:	08 95       	ret

00000346 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 346:	20 91 47 01 	lds	r18, 0x0147	; 0x800147 <UART_TxHead>
 34a:	2f 5f       	subi	r18, 0xFF	; 255
 34c:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
 34e:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <UART_TxTail>
 352:	29 17       	cp	r18, r25
 354:	e1 f3       	breq	.-8      	; 0x34e <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 356:	e2 2f       	mov	r30, r18
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	e8 59       	subi	r30, 0x98	; 152
 35c:	fe 4f       	sbci	r31, 0xFE	; 254
 35e:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 360:	20 93 47 01 	sts	0x0147, r18	; 0x800147 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 364:	e1 ec       	ldi	r30, 0xC1	; 193
 366:	f0 e0       	ldi	r31, 0x00	; 0
 368:	80 81       	ld	r24, Z
 36a:	80 62       	ori	r24, 0x20	; 32
 36c:	80 83       	st	Z, r24
 36e:	08 95       	ret

00000370 <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 370:	cf 93       	push	r28
 372:	df 93       	push	r29
 374:	ec 01       	movw	r28, r24
    while (*s)
 376:	03 c0       	rjmp	.+6      	; 0x37e <uart_puts+0xe>
        uart_putc(*s++);
 378:	21 96       	adiw	r28, 0x01	; 1
 37a:	0e 94 a3 01 	call	0x346	; 0x346 <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 37e:	88 81       	ld	r24, Y
 380:	81 11       	cpse	r24, r1
 382:	fa cf       	rjmp	.-12     	; 0x378 <uart_puts+0x8>
        uart_putc(*s++);
}/* uart_puts */
 384:	df 91       	pop	r29
 386:	cf 91       	pop	r28
 388:	08 95       	ret

0000038a <__itoa_ncheck>:
 38a:	bb 27       	eor	r27, r27
 38c:	4a 30       	cpi	r20, 0x0A	; 10
 38e:	31 f4       	brne	.+12     	; 0x39c <__itoa_ncheck+0x12>
 390:	99 23       	and	r25, r25
 392:	22 f4       	brpl	.+8      	; 0x39c <__itoa_ncheck+0x12>
 394:	bd e2       	ldi	r27, 0x2D	; 45
 396:	90 95       	com	r25
 398:	81 95       	neg	r24
 39a:	9f 4f       	sbci	r25, 0xFF	; 255
 39c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__utoa_common>

000003a0 <__utoa_ncheck>:
 3a0:	bb 27       	eor	r27, r27

000003a2 <__utoa_common>:
 3a2:	fb 01       	movw	r30, r22
 3a4:	55 27       	eor	r21, r21
 3a6:	aa 27       	eor	r26, r26
 3a8:	88 0f       	add	r24, r24
 3aa:	99 1f       	adc	r25, r25
 3ac:	aa 1f       	adc	r26, r26
 3ae:	a4 17       	cp	r26, r20
 3b0:	10 f0       	brcs	.+4      	; 0x3b6 <__utoa_common+0x14>
 3b2:	a4 1b       	sub	r26, r20
 3b4:	83 95       	inc	r24
 3b6:	50 51       	subi	r21, 0x10	; 16
 3b8:	b9 f7       	brne	.-18     	; 0x3a8 <__utoa_common+0x6>
 3ba:	a0 5d       	subi	r26, 0xD0	; 208
 3bc:	aa 33       	cpi	r26, 0x3A	; 58
 3be:	08 f0       	brcs	.+2      	; 0x3c2 <__utoa_common+0x20>
 3c0:	a9 5d       	subi	r26, 0xD9	; 217
 3c2:	a1 93       	st	Z+, r26
 3c4:	00 97       	sbiw	r24, 0x00	; 0
 3c6:	79 f7       	brne	.-34     	; 0x3a6 <__utoa_common+0x4>
 3c8:	b1 11       	cpse	r27, r1
 3ca:	b1 93       	st	Z+, r27
 3cc:	11 92       	st	Z+, r1
 3ce:	cb 01       	movw	r24, r22
 3d0:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <strrev>

000003d4 <strrev>:
 3d4:	dc 01       	movw	r26, r24
 3d6:	fc 01       	movw	r30, r24
 3d8:	67 2f       	mov	r22, r23
 3da:	71 91       	ld	r23, Z+
 3dc:	77 23       	and	r23, r23
 3de:	e1 f7       	brne	.-8      	; 0x3d8 <strrev+0x4>
 3e0:	32 97       	sbiw	r30, 0x02	; 2
 3e2:	04 c0       	rjmp	.+8      	; 0x3ec <strrev+0x18>
 3e4:	7c 91       	ld	r23, X
 3e6:	6d 93       	st	X+, r22
 3e8:	70 83       	st	Z, r23
 3ea:	62 91       	ld	r22, -Z
 3ec:	ae 17       	cp	r26, r30
 3ee:	bf 07       	cpc	r27, r31
 3f0:	c8 f3       	brcs	.-14     	; 0x3e4 <strrev+0x10>
 3f2:	08 95       	ret

000003f4 <_exit>:
 3f4:	f8 94       	cli

000003f6 <__stop_program>:
 3f6:	ff cf       	rjmp	.-2      	; 0x3f6 <__stop_program>
